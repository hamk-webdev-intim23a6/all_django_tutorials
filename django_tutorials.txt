## Dictionary app tutorial
# by Petri Kuittinen 2022 for Django 4.0

# Make a Django project, unless you already have a one and plan to use it
django-admin startproject mysite

# Create a dictionary app
python3 manage.py startapp dictionary

# Put the following to dictionary/models.py
from django.db import models

class Dictionary(models.Model):
    word = models.CharField(max_length=200)
    definition = models.CharField(max_length=200)
    def __str__(self):
        return f"{self.word} = {self.definition}"

    class Meta:
        indexes = [
            models.Index(fields=['word', 'definition']),
        ]
              
# Put the following to dictionary/admin.py
from django.contrib import admin
from .models import Dictionary

class DictionaryAdmin(admin.ModelAdmin):
    list_display = ('word', 'definition')
    search_fields = ['word', 'definition']

admin.site.register(Dictionary, DictionaryAdmin)

# add the following to mysite/settings.py 
INSTALLED_APPS = [
    'dictionary.apps.DictionaryConfig',

# Everytime you make changes to your dictionary models, you must run:
python3 manage.py makemigrations dictionary

# If you want to see what's happening under the hood (not required):
python3 manage.py sqlmigrate dictionary 0001

# To make actual changes to database, you must run:
python3 manage.py migrate

# If you don't yet have superuser account, create it:
python3 manage.py createsuperuser

# Test the admin interface at localhost:8000/admin/
python3 manage.py runserver

# Create dictionary/urls.py with:
from django.urls import path

from . import views

app_name = 'dictionary'
urlpatterns = [
    path('', views.index, name='index'),
    path('addview', views.addview, name="addview"),
    path('add', views.add, name="add"),
]

# Link mysite/views.py to your app
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('dictionary/', include('dictionary.urls')),
]


# Create the views dictionary/views.py
from django.shortcuts import render
from django.urls import reverse
from django.http import HttpResponseRedirect
from django.forms import ModelForm
from django.views.generic.edit import FormView

from .models import Dictionary

# index to dictionary app, allowing to search words
def index(request):
    word = ''
    definitions = []
    if 'word' in request.GET:
        word = request.GET['word']
        if len(word)>0:
            definitions = Dictionary.objects.filter(
                word__icontains=word).order_by('word')
    context = {"definitions": definitions}
    return render(request, 'dictionary/index.html', context)

# view to add new word and definition pairs to dictionary
def addview(request):
    context = {}
    return render(request, 'dictionary/add.html', context)    

# make a form from a model (easy and lazy way :) )
class DictionaryForm(ModelForm):
    class Meta:
        model = Dictionary
        fields = ['word', 'definition']

# add new words to dictionary
def add(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = DictionaryForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            word = form.cleaned_data['word']
            definition = form.cleaned_data['definition']
            # save to dictionary
            d = Dictionary(word=word, definition=definition)
            d.save()
            # redirect to a new URL:
            return HttpResponseRedirect(reverse('dictionary:addview'))
    # if a GET (or any other method) we'll create a blank form
    else:
        form = DictionaryForm()
    return render(request, 'dictionary/add.html', {'form': form})
  
# Create dictionary/templates/dictionary/index.html:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Dictionary</title> 
    </head>
    <body>
    <h1>Search Words</h1>
    <form action="" method="get">
        <label for="word">Word:</label>
        <input type="text" id="word" name="word" size="40" autofocus>
        <input type="submit" value="Search">
        <br>
        <output>
        {% if definitions %}
        <ul>
            {% for definition in definitions %}
                <li>{{ definition }}</li>
            {% endfor %}
        </ul>
        {% else %}
            <p>no definitions found.</p>
        {% endif %}
        </output>
    </form>
    <p><a href="{% url 'dictionary:addview' %}">Add words to dictionary</a></p>
    </body>
</html>

# Create dictionary/templates/dictionary/add.html:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Dictionary - Add</title> 
</head>
<body>
    <h1>Add Words</h1>
    <form action="{% url 'dictionary:add' %}" method="post">
        {% csrf_token %}
        <label for="word">Word:</label>
        <input type="text" id="word" name="word" size="40" autofocus>
        <label for="definition">Definition:</label>
        <input type="text" id="definition" name="definition" size="40">
        <input type="submit" value="Add word">
    </form>
    <p><a href="{% url 'dictionary:index' %}">Search words</a></p>
</body>
</html>

# Test your app at localhost:8000/dictionary/
python3 manage.py runserver

# UPDATED version using generic class based views. views.py:
from django.shortcuts import render
from django.views.generic.edit import CreateView
from django.urls.base import reverse_lazy
from .models import Dictionary

# index to dictionary app, allowing to search words
def index(request):
    word = ''
    definitions = []
    if 'word' in request.GET:
        word = request.GET['word']
        if len(word)>0:
            definitions = Dictionary.objects.filter(
                word__icontains=word).order_by('word')
    context = {"definitions": definitions}
    return render(request, 'dictionary/index.html', context)

class DictionaryCreateView(CreateView):
    model = Dictionary
    fields = ['word', 'definition']
    template_name = "dictionary/add.html"
    success_url = reverse_lazy('dictionary:add')

# updated dictionary/urls.py:
from django.urls import path
from . import views

app_name = 'dictionary'
urlpatterns = [
    path('', views.index, name='index'),
    path('add', views.DictionaryCreateView.as_view(), name="add"),
]

# updated templates/dictionary/add.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Dictionary - Add</title>
</head>
<body>
    <h1>Add Words</h1>
    <form action="{% url 'dictionary:add' %}" method="post">
        {% csrf_token %}
        <table>
            {{ form.as_table }}
        </table>
        <input type="submit" value="Add word">
    </form>
    <p><a href="{% url 'dictionary:index' %}">Search words</a></p>
</body>
</html>

# change index.html link to following:
<p><a href="{% url 'dictionary:add' %}">Add words to dictionary</a></p>

# run server and test again
python3 manage.py runserver


## Signup, login, logout and base template tutorial
# by Petri Kuittinen 2022 for Django 3.2

# assumes that your main project is mysite
# create a new app called account
python3 manage.py startapp account

# put the following to account/views.py
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views import generic

class SignUpView(generic.CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'registration/signup.html'

# Create templates/base.html
{% load static %}<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <title>{% block title %}Django Examples{% endblock %}</title>
    {% block stylesheet %}
    <style>
    </style>
    {% endblock %}  <!-- HERE -->
  </head>
  <body>
    {% block body %}  <!-- HERE -->
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
          <a class="navbar-brand" href="{% url 'home' %}">Django Examples Home</a>
        </div>
      </nav>
      <div class="container">
        <ol class="breadcrumb my-4">
          {% block breadcrumb %}
          {% endblock %}
        </ol>
        {% block content %}
        {% endblock %}
	{% block footer %}
	<hr>
	<footer>terms policy copyright</footer>
	{% endblock footer %}
      </div>
    {% endblock body %}  <!-- AND HERE -->
  </body>
</html>


# Create templates/home.html
{% extends 'base.html' %}
{% block content %}
<h1>Home</h1>
{% if user.is_authenticated %}
    <p>User logged in: {{ user }}</p>
    <form method="post" action="{% url 'logout' %}">
        {% csrf_token %}
    <button type="submit">Log out</button>
    </form>
{% else %}
    <p>You must login first.</p>
    <p><a href="{% url 'login' %}">Login</a></p>
    <p><a href="{% url 'signup' %}">Create a new Account</a></p>
{% endif %}
<h2>Apps Gallery </h2>
<ul>
    <li><a href="{% url 'dictionary:index' %}">Dictionary</a></li>
</ul>
{% endblock %}


# Create templates/registration/login.html
{% extends 'base.html' %}
{% block title %}Login{% endblock %}
{% block content %}
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }}
</table>
    <button type="submit">Login</button>
</form>
{% endblock %}

# Create templates/registration/signup.html
{% extends 'base.html' %}
{% block content %}
<h2>Sign up</h2>
<form method="post" novalidate>
  {% csrf_token %}
  <table>
  {{ form.as_table }}
  </table>
  <button type="submit">Create an account</button>
</form>
{% endblock %}


# add these 3 things following to mysite/settings.py 
INSTALLED_APPS = [
    'account.apps.AccountConfig',

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],    

# To the end of settings.py
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
    
# Add the following to mysite/urls.py
from django.views.generic.base import TemplateView
from django.contrib.auth import views as auth_views
from account.views import SignUpView

urlpatterns = [
    path('', TemplateView.as_view(template_name='home.html'), name='home'),
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('signup/', SignUpView.as_view(), name='signup'),

# To make actual changes to database, you must run:
python3 manage.py migrate
# If you don't yet have superuser account, create it:
python3 manage.py createsuperuser
# Test the the home screen + login at localhost:8000/
python3 manage.py runserver


## Guestbook app tutorial
# by Petri Kuittinen 2022 for Django 3.2
# This requires you to do the login, logout tutorial first

python3 manage.py startapp guestbook

# add the following two things to mysite/settings.py 
INSTALLED_APPS = [
    'guestbook.apps.GuestbookConfig',


LOGIN_REQUIRED = 'login'

# Put the following to guestbook/models.py
from django.db import models
from django.contrib.auth.models import User

class Post(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    comment = models.CharField(max_length=1000)
    date = models.DateTimeField('date created', auto_now_add=True)
    def __str__(self):
        return self.comment

# Put the following to guestbook/admin.py
from django.contrib import admin

# Register your models here.
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ('author', 'comment', 'date')
    list_filter = ['date']
    search_fields = ['comment']
    
admin.site.register(Post, PostAdmin)

# make migrations based on the models.py changes
python3 manage.py makemigrations guestbook

# migrate to have actual changes in database
python3 manage.py migrate

# Test the admin interface at localhost:8000/admin/
python3 manage.py runserver

# put the following to guestbook/views.py
from django.http.response import HttpResponseRedirect
from django.shortcuts import render
from django.urls.base import reverse_lazy
from django.views.generic.edit import BaseFormView, CreateView
#from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django import forms
from .models import Post

class PostForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = ['comment']
        widgets = {
            'comment': forms.Textarea
        }

class PostView(LoginRequiredMixin, CreateView):
    login_url = '/login/'
    form_class = PostForm
    model = Post
    template_name = 'guestbook/post.html'
    #fields = ['comment']
    success_url = reverse_lazy('guestbook:index')
    def form_valid(self, form):
        # Set the form's author to the submitter if the form is valid
        form.instance.author = self.request.user
        super().form_valid(form)
        return HttpResponseRedirect(self.get_success_url())

def index(request):
    posts = Post.objects.all().order_by('-date')
    context = {"posts": posts}
    return render(request, 'guestbook/index.html', context)


# Create guestbook/urls.py with the following content:
from django.urls import path

from . import views

app_name = 'guestbook'
urlpatterns = [
    path('', views.index, name='index'),
    path('post', views.PostView.as_view(), name='post'),
]

# Add the following to mysite/urls.py:
urlpatterns = [
    path('guestbook/', include('guestbook.urls')),
    
# Create guestbook/templates/guestbook/index.html
{% extends 'base.html' %}
{% block content %}
<h1>Guestbook</h1>
<p><a href="{% url 'guestbook:post' %}">Add a new post</a></p>
{% if posts %}
<h2>Posts</h2>
<ul>
    {% for post in posts %}
        <li><strong>{{ post.author }} {{ post.date }}</strong><br>
            {{ post.comment|linebreaks }}
        </li>
    {% endfor %}
</ul>
{% else %}
    <p>No posts were found.</p>
{% endif %}
{% endblock %}

# Create guestbook/templates/guestbook/post.html
{% extends 'base.html' %}
{% block content %}
<h1>Make a New Guestbook Post</h1>
<form method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }}
    </table>
    <button type="submit">Create a new post</button>
</form>
<hr>
<p><a href="{% url 'guestbook:index' %}">View Guestbook</a></p>
{% endblock %}

# Test the app at localhost:8000/guestbook/
python3 manage.py runserver


## Gallery app tutorial
# by Petri Kuittinen 2022 for Django 4.1

python3 manage.py startapp gallery

# add the following two things to mysite/settings.py 
# to the start
import os

INSTALLED_APPS = [
    'gallery.apps.GalleryConfig',

# add these to end of mysite/settings.py
MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# put the following gallery/models.py
from django.db import models

class Post(models.Model):
    image = models.ImageField(upload_to='images/')
    description = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published', auto_now_add=True)
    mod_date = models.DateTimeField('date modified', auto_now=True)
    
# Put the following to gallery/admin.py
from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ('description', 'image', 'pub_date', 'mod_date')
    search_fields = ['description']
    list_filter = ['pub_date', 'mod_date']

admin.site.register(Post, PostAdmin)

# Install Pillow
sudo pip3 install Pillow

# Run migrations
python3 manage.py makemigrations
python3 manage.py migrate

# Create gallery/forms.py
from django import forms
from .models import Post

class UploadForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = ['description', 'image']
        
# Put the following to gallery/views.py
from django.http import HttpResponse
from django.shortcuts import render, redirect
from .models import Post
from .forms import UploadForm

def display_images(request):
    if request.method == 'GET':
        posts = Post.objects.all()
        return render(request, 'gallery/index.html', {'posts' : posts})

def image_upload(request):
    if request.method == 'POST':
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('gallery:success')
    else:
        form = UploadForm()
    return render(request, 'gallery/upload.html', {'form' : form})


def success(request):
    return render(request, 'gallery/success.html', {})
    
# Create gallery/urls.py with the following content:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from .views import *

app_name = 'gallery'
urlpatterns = [
    path('', display_images, name = 'display_images'),
    path('image_upload', image_upload, name = 'image_upload'),
    path('success', success, name = 'success'),
]


# Add the following to mysite/urls.py
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('gallery/', include('gallery.urls')),
]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Create gallery/templates/gallery/index.html
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Images</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js">
        </script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js">
        </script>
    </head>
    <body>
        <div class="col-md-12">
            <h1>Gallery</h1>
            <p><a href="{% url 'gallery:image_upload' %}">Upload more images</a></p>
        </div>
        {% for post in posts %}
        <div class="col-md-4">
            <p>{{ post.description }}</p>
            <img src="{{ post.image.url }}" class="img-responsive" style="width: 100%; float: left; margin-right: 10px;" />
        </div>
        {% endfor %}

    </body>
</html>

# Create gallery/templates/gallery/upload.html
<h1>Image Upload</h1>
<form method = "post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Upload</button>
</form>

<p><a href="{% url 'gallery:display_images' %}">Go back to main page</a></p>

# Create gallery/templates/gallery/success.html
<p>Thank you for uploading an image. I hope you didn't break any copyright laws.</p>
<p><a href="{% url 'gallery:image_upload' %}">Upload more images</a></p>
<p><a href="{% url 'gallery:display_images' %}">Go back to main page</a></p>

# Test and run
python3 manage.py runserver

## Feedback app tutorial
# by Petri Kuittinen 2022 for Django 4.1

# Create a dictionary app
python3 manage.py startapp feedback

# Add mysite/settings.py
INSTALLED_APPS = [
    'feedback.apps.FeedbackConfig',

# feedback/models.py
from django.db import models
from django.core.validators import MaxValueValidator, MinValueValidator

class Topic(models.Model):
    name = models.CharField(max_length=160)
    def __str__(self):
        return self.name

class Feedback(models.Model):
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    rating = models.IntegerField(default=50, validators=[
        MinValueValidator(1), MaxValueValidator(100)])
    good = models.TextField(max_length=2000, blank=True)
    bad = models.TextField(max_length=2000, blank=True)
    date = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return f"{self.date}"

# feedback/admin.py
from django.contrib import admin
from .models import Topic, Feedback

class TopicAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ['name']

class FeedbackAdmin(admin.ModelAdmin):
    list_display = ('topic', 'rating', 'good', 'bad', 'date')
    list_filter = ['topic', 'date']
    search_fields = ['good', 'bad']

admin.site.register(Topic, TopicAdmin)
admin.site.register(Feedback, FeedbackAdmin)

# Run migrations
python3 manage.py makemigrations
python3 manage.py migrate

# Test admin interface
http://localhost:8000/admin/

# feedback/views.py
from django.shortcuts import render
from django.views.generic.edit import CreateView
from django.urls.base import reverse_lazy
from .models import Feedback

# Create your views here.
class FeedbackCreateView(CreateView):
    model = Feedback
    fields = ['topic', 'rating', 'good', 'bad']
    template_name = "feedback/index.html"
    success_url = reverse_lazy('feedback:index')

# Create feedback/urls.py
from django.urls import path
from . import views

app_name = 'feedback'
urlpatterns = [
    path('', views.FeedbackCreateView.as_view(), name='index'),
]

# Add to mysite/urls.py
urlpatterns = [
    path('feedback/', include('feedback.urls')),

# templates/feedback/index.html
<h1>Give Feedback</h1>
<form action="" method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }}
    </table>
    <input type="submit" value="Submit">
</form>

# Test and run
python3 manage.py runserver
http://localhost:8000/feedback/


## MovieDB app tutorial
# by Petri Kuittinen 2022 for Django 4.1

# Create a dictionary app
python3 manage.py startapp moviedb

# Add mysite/settings.py
INSTALLED_APPS = [
    'moviedb.apps.MoviedbConfig',

# moviedb/models.py
from django.db import models

class Director(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class Genre(models.Model):
    name = models.CharField(max_length=100)
    def __str__(self):
        return f"{self.name}"


class Movie(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateField('year published')
    directors = models.ManyToManyField(Director)
    genres = models.ManyToManyField(Genre)
    description = models.TextField(max_length=2000)
    def __str__(self):
        return f"{self.title} ({self.pub_date.year})"

# moviedb/admin.py
from django.contrib import admin
from .models import Director, Genre, Movie

class MovieAdmin(admin.ModelAdmin):
    list_display = ('title', 'description', 'pub_date')
    list_filter = ['pub_date', 'genres']
    search_fields = ['title', 'description']


class DirectorAdmin(admin.ModelAdmin):
    list_display = ('last_name', 'first_name')
    search_fields = ['first_name', 'last_name']


class GenreAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ['name']


admin.site.register(Movie, MovieAdmin)
admin.site.register(Director, DirectorAdmin)
admin.site.register(Genre, GenreAdmin)

# Run migrations
python3 manage.py makemigrations
python3 manage.py migrate

# Test the admin interface
http://localhost:8000/admin/

# moviedb/views.py
from django.shortcuts import render
from django.views import generic
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.utils import timezone
from django.urls import reverse_lazy
from .models import Movie, Director, Genre

class CreateMovieView(CreateView):
    model = Movie
    template_name = 'moviedb/create.html'
    fields = ['title', 'pub_date', 'directors', 'genres', 'description']
    success_url = reverse_lazy('moviedb:index')


class UpdateMovieView(UpdateView):
    model = Movie
    template_name = 'moviedb/update.html'
    fields = ['title', 'pub_date', 'directors', 'genres', 'description']
    success_url = reverse_lazy('moviedb:index')


class DeleteMovieView(DeleteView):
    model = Movie
    #template_name = 'moviedb/entry_confirm_delete.html'
    success_url = reverse_lazy('moviedb:index')


class IndexView(generic.ListView):
    template_name = 'moviedb/index.html'
    context_object_name = 'latest_movies'
    def get_queryset(self):
        return Movie.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]
        
# create moviedb/urls.py
from django.urls import path
from . import views

app_name = 'moviedb'
urlpatterns = [
    path('', views.IndexView.as_view(), name='index'),
    path('create/', views.CreateMovieView.as_view(), name='create'),
    path('<int:pk>/delete/', views.DeleteMovieView.as_view(), name='delete'),
    path('<int:pk>/', views.UpdateMovieView.as_view(), name='update'),
]


# add to mysite/urls.py
urlpatterns = [
    path('moviedb/', include('moviedb.urls')),

# moviedb/templates/moviedb/index.html
{% load i18n %}
{% load static %}

<p></p><a href="{% url 'moviedb:create' %}">{% trans "Add a new movie" %}</a></p>

<h1>Latest Movies</h1>
{% if latest_movies %}
    <ul>
    {% for movie in latest_movies %}
        <li><h2>{{ movie.title }}</h2>
        <p>Published: {{ movie.pub_date }}</p>
        <p>Directed by:
        <ul>
            {% for director in movie.directors.all %}
            <li>{{ director.first_name }} {{ director.last_name }}</li>
            {% endfor %}
        </ul></p>
        <p>Genres:
            <ul>
                {% for genre in movie.genres.all %}
                <li>{{ genre.name }}</li>
                {% endfor %}
            </ul></p>
        <p><a href="{{ movie.id }}/">Update movie information</a></p>
        <p><a href="{{ movie.id }}/delete/">Delete movie</a></p>
        </li>
    {% endfor %}
    </ul>
{% else %}
    <p>{% trans "No new movies were available." %}</p>
{% endif %}

# moviedb/templates/moviedb/create.html
<h1>Add a New Movie</h1>
<form action="{% url 'moviedb:create' %}" method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }}
    </table>
    <input type="submit" value="Add">
</form>

# moviedb/templates/moviedb/update.html
<h1>Update a Movie Information</h1>
<form action="" method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }}
    </table>
    <input type="submit" value="Update">
</form>

# moviedb/templates/moviedb/movie_confirm_delete.html
<h1>Delete a Movie</h1>

<form method="post">{% csrf_token %}
    <p>Are you sure you want to delete "{{ object }}"?</p>
    <input type="submit" value="Confirm">
</form>

# Test and run
python3 manage.py runserver
http://localhost:8000/moviedb/

